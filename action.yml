name: 'Clever Cloud review app on PRs'
description: 'Deploy a review app on Clever Cloud when a PR is opened and list modified content pages'

inputs:
  type:  
    description: 'Which type of app to create'
    required: true
  name:
    description: 'The name of your app'
    required: true
    default: ${{ github.event.pull_request.base.repo.name }}-PR-${{ github.event.number }}
  alias:
    description: 'The alias of your app'
    required: true
    default: ${{ github.event.pull_request.base.repo.name }}-PR-${{ github.event.number }}
  region:
    description: 'The region to deploy on'
    required: true
    default: 'par'
  organization:
    description: 'The organization to deploy on'
    required: true
    default: $ORGA_ID
  domain:
    description: 'The domain to use for the app'
    required: false
    default: ${{ github.event.pull_request.base.repo.name }}-PR-${{ github.event.number }}.cleverapps.io
  set-env:
    description: 'Set environment variables'
    required: false
    default: 'false'
  environment:
    description: 'Environment to run tests against'
    required: true
    default: ''
  token:
    description: 'GITHUB_TOKEN or a repo scoped PAT.'
    default: ${{ github.token }}
  repository:
    description: 'The full name of the repository in which to create or update a comment.'
    default: ${{ github.event.pull_request.base.repo.name }}
  pr-number:
    description: 'The number of the pull request in which to create a comment.'
    required: true
    default: ${{ github.event.number }}
  comment-id:
    description: Comment ID on the PR to update
    default: ${{ github.event.comment.id }}
  body:
    description: The body of the comment
    default: "This is a comment!"

runs:
  using: "composite"
  steps:
    - name: Install clever-tools
      shell: bash
      run: npm install -g clever-tools

    - name: Create app
      if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
      shell: bash
      run: |
        clever create --type ${{ inputs.type }} ${{ inputs.name }} --alias ${{ inputs.alias }} --region ${{ inputs.region }} --org ${{ inputs.organization }}
        clever domain add ${{ inputs.domain }}
      
    - name: Set environment variables
      if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' && inputs.set-env }}
      shell: bash
      run: |
        for var in $(env | awk -F= '/^GH_/ { print $1 }')
        do
          real_var=${var#GH_}
          clever env set $real_var "${!var}"
        done
    
    - name: Deploy app
      if: ${{ github.event.action == 'opened' || github.event.action == 'reopened' }}
      shell: bash
      id: deploy
      run: clever deploy

    - name: Update app
      if: ${{ github.event.action == 'synchronize' }}
      shell: bash
      id: update
      run: |
        clever link -o "$ORGA_ID" ${{ inputs.name }}
        clever deploy --force
    
    - name: Update app
      if: ${{ github.event.action == 'closed' }}
      shell: bash
      id: delete
      run: |
        clever link -o "$ORGA_ID" ${{ inputs.name }}
        clever delete --alias ${{ inputs.alias }} --yes
    
    - name: Install dependencies
      if: ${{ steps.deploy.outcome == 'success' }}
      shell: bash
      run: pnpm install && pnpm run build
        
#- name: Get modified content files
#  if: ${{ steps.deploy.outcome == 'success' || steps.update.outcome == 'success' }}
#  shell: bash
#  id: get-modified-files
#  run: |
#    BASE_SHA="${{ github.event.pull_request.base.sha }}"
#    HEAD_SHA="${{ github.event.pull_request.head.sha }}"
#
#    MODIFIED_FILES=$(git diff --name-only $BASE_SHA $HEAD_SHA | grep "^${{ inputs.watch-path }}" || true)

#    MODIFIED_FILES_JSON=$(printf "%s" "$MODIFIED_FILES" | jq -R . | jq -s . | xargs || echo '[]')
    
#    echo "Modified files JSON: $MODIFIED_FILES_JSON"
#
#    modified_files="${MODIFIED_FILES_JSON}"
#    echo "Modified files: $modified_files"
#    echo "modified_files=$modified_files" >> "$GITHUB_OUTPUT"

    - name: Comment PR on app creation
      if: ${{ steps.deploy.outcome == 'success' }}
      uses: actions/github-script@v7
      with:
        script: dist/main.js
#          try {
#            const modifiedFiles = JSON.parse('${{ steps.get-modified-files.outputs.modified_files }}');
#        
#            let message = `## ðŸš€ Review App Deployed\n\n`;
#            message += `### ðŸ”— App URL\n`;
#            message += `Your app is available at [https://${{ inputs.domain }}](https://${{ inputs.domain }})\n\n`;
#        
#          if (modifiedFiles && modifiedFiles.length > 0) {
#            message += `### ðŸ“„ Modified Pages\n`;
#            message += `The following pages were modified in this PR:\n\n`;
#          
#            for (const file of modifiedFiles) {
#              const pageUrl = `https://${{ inputs.domain }}/${file.replace(/\.[^/.]+$/, '')}`;
#            
#
#              const staticUrl = pageUrl.replace(new RegExp(`/${{ inputs#['watch-path'] }}`, 'g'), "");
#
#              message += `- [${file}](${staticUrl})\n`;
#          }


#        await github.rest.issues.createComment({
#          owner: context.repo.owner,
#          repo: context.repo.repo,
#          issue_number: context.payload.pull_request.number,
#          body: message
#        });
#
#      } catch (error) {
#        console.error('Error processing modified files or posting comment:', error);
#        throw error;
#      }


#    - name: Comment PR on app update
#      if: ${{ steps.update.outcome == 'success' }}
#      uses: actions/github-script@v7
#      with:
#        script: |
#          const modifiedFiles = JSON.parse('${{ steps.get-modified-files.outputs.modified_files }}');
#          
#          let message = `## ðŸ”„ Review App Updated\n\n`;
#          message += `### ðŸ”— App URL\n`;
#          message += `Your updated app is available at [https://${{ inputs.domain }}](https://${{ inputs.domain }})\n\n`;
#          
#          if (modifiedFiles && modifiedFiles.length > 0) {
#            message += `### ðŸ“„ Modified Pages\n`;
#            message += `The following pages were modified in this update:\n\n`;
#            
#            for (const file of modifiedFiles) {
#              const pageUrl = `https://${{ inputs.domain }}/${file.replace(/\.[^/.]+$/, '')}`;
#              message += `- [${file}](${pageUrl})\n`;
#            }
#          }
#          
#          github.rest.issues.createComment({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            issue_number: context.payload.pull_request.number,
#            body: message
#          });
#    
#    - name: Comment PR on deletion
#      if: ${{ steps.delete.outcome == 'success' }}
#      uses: actions/github-script@v7  
#      with:
#        script: dist/comment.js
#          const message = `## ðŸ‘‹ Review App Deleted\n\nThis PR has been closed and the review app has been deleted.`;
#          
#          github.rest.issues.createComment({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            issue_number: context.payload.pull_request.number,
#            body: message
#          });