"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fetchEventSource = fetchEventSource;
exports.JSON_CONTENT_TYPE = exports.EVENT_STREAM_CONTENT_TYPE = void 0;

var _sseParse = require("./sse-parse.js");

// This code is adapted from https://github.com/Azure/fetch-event-source
// MIT License Copyright (c) Microsoft Corporation.
const EVENT_STREAM_CONTENT_TYPE = 'text/event-stream';
exports.EVENT_STREAM_CONTENT_TYPE = EVENT_STREAM_CONTENT_TYPE;
const JSON_CONTENT_TYPE = 'application/json';
exports.JSON_CONTENT_TYPE = JSON_CONTENT_TYPE;
const LAST_EVENT_ID_HEADER = 'Last-Event-ID';
/**
 * Native implementation of an SSE
 * @param {string} input
 * @param {object} param1
 * @returns
 */

function fetchEventSource(input, {
  abortController = new AbortController(),
  headers,
  onOpen,
  onMessage,
  onClose,
  onError,
  resumeFrom,
  ...rest
}) {
  // make a copy of the input headers since we may modify it below:
  const _headers = {
    accept: EVENT_STREAM_CONTENT_TYPE,
    ...headers
  };

  if (resumeFrom) {
    _headers[LAST_EVENT_ID_HEADER] = resumeFrom;
  }

  fetch(input, { ...rest,
    headers: _headers,
    signal: abortController.signal
  }).then(async response => {
    await onOpen(response);
    await (0, _sseParse.readBytes)(response.body, abortController.signal, onMessage);
    return onClose?.();
  }).catch(err => {
    if (abortController.signal.aborted) {
      onClose?.(abortController.signal.reason);
    } else {
      // if we haven't aborted the request ourselves:
      onError?.(err);
    }
  });
}