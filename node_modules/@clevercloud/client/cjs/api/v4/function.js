"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.list = list;
exports.create = create;
exports._delete = _delete;
exports.get = get;
exports.update = update;
exports.listDeployments = listDeployments;
exports.createDeployment = createDeployment;
exports.deleteDeployment = deleteDeployment;
exports.getDeployment = getDeployment;
exports.triggerDeployment = triggerDeployment;
exports.updateDeployment = updateDeployment;

var _pickNonNull = require("../../pick-non-null.js");

/**
 * GET /functions/organizations/{ownerId}/functions
 * @param {Object} params
 * @param {String} params.undefined
 */
function list(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/functions/organizations/${params.ownerId}/functions`,
    headers: {
      Accept: 'application/json'
    } // no query params
    // no body

  });
}
/**
 * POST /functions/organizations/{ownerId}/functions
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */


function create(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/functions/organizations/${params.ownerId}/functions`,
    headers: {
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * DELETE /functions/organizations/{ownerId}/functions/{functionId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function _delete(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}`,
    headers: {} // no query params
    // no body

  });
}
/**
 * GET /functions/organizations/{ownerId}/functions/{functionId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function get(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}`,
    headers: {
      Accept: 'application/json'
    } // no query params
    // no body

  });
}
/**
 * PUT /functions/organizations/{ownerId}/functions/{functionId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function update(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'put',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}`,
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * GET /functions/organizations/{ownerId}/functions/{functionId}/deployments
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function listDeployments(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments`,
    headers: {
      Accept: 'application/json'
    } // no query params
    // no body

  });
}
/**
 * POST /functions/organizations/{ownerId}/functions/{functionId}/deployments
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function createDeployment(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments`,
    headers: {
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * DELETE /functions/organizations/{ownerId}/functions/{functionId}/deployments/{deploymentId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function deleteDeployment(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments/${params.deploymentId}`,
    headers: {} // no query params
    // no body

  });
}
/**
 * GET /functions/organizations/{ownerId}/functions/{functionId}/deployments/{deploymentId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function getDeployment(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments/${params.deploymentId}`,
    headers: {
      Accept: 'application/json'
    } // no query params
    // no body

  });
}
/**
 * POST /functions/organizations/{ownerId}/functions/{functionId}/deployments/{deploymentId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 */


function triggerDeployment(params) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments/${params.deploymentId}`,
    headers: {} // no query params
    // no body

  });
}
/**
 * PUT /functions/organizations/{ownerId}/functions/{functionId}/deployments/{deploymentId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function updateDeployment(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'put',
    url: `/v4/functions/organizations/${params.ownerId}/functions/${params.functionId}/deployments/${params.deploymentId}`,
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}